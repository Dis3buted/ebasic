/*
Red-black Gauss Seidel with SOR to solve Laplace's equation for diffusion in one dimension
This illustrates distributing data amongst the cores, halo swapping and reductions
*/
DATA_SIZE=100
MAX_ITS=10000
W=1.3  // Overrelaxing factor (between 1 and 2)

// Work out the amount of data to hold on this core
local_size=DATA_SIZE/numcores
if local_size * numcores != DATA_SIZE then
  if coreid < DATA_SIZE-local_size*numcores then local_size=local_size+1
end if

// Allocate the two arrays (two as this is Jacobi) we +2 to account for halos/boundary conditions
dim data[local_size+2]

// Set the initial conditions
for i=0 to local_size+1
  data[i]=0.0
next
if coreid=0 then data[0]=1.0
if coreid=numcores-1 then data[local_size+1]=10.0

// Compute the initial absolute residual
tmpnorm=0.0
for i=1 to local_size
  tmpnorm=tmpnorm+(data[i]*2-data[i-1]-data[i+1])^2
next
reduce sum tmpnorm into tmpnorm
bnorm=sqrt tmpnorm

norm=1.0
its=0
do while norm >= 1e-4 and its < MAX_ITS
  // Halo swap to my left and right neighbours if I have them
  if coreid > 0 then
    sendrecv data[1] tofrom coreid-1 into data[0]
  end if
  if coreid < numcores-1 then
    sendrecv data[local_size] tofrom coreid+1 into data[local_size+1]
  end if

  // Calculate current residual
  tmpnorm=0.0
  for i=1 to local_size
    tmpnorm=tmpnorm+(data[i]*2-data[i-1]-data[i+1])^2
  next
  reduce sum tmpnorm into tmpnorm
  norm=(sqrt tmpnorm)/bnorm  // Gives us the relative norm

  if coreid=0 and its%1000 = 0 then print "RNorm is "+norm+" at "+its+" iterations"

  // Performs the Gauss seidel iteration for Laplace, uses W to overrelax the system
  for j=1 to 2
    s=2
    if j=2 then s=1
    // Doing it this way (red-black) ensures the convergence behaviour is the same irrespective of distribution
    for i=s to local_size
      data[i]=((1-W) * data[i]) + 0.5 * W * (data[i-1]+data[i+1])
      i=i+1
    next
  next
  its=its+1
end do

if coreid=0 then print "Completed in "+its+" iterations, RNorm="+norm